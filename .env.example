# ====================================================================
# 3BAY - WEB3 MARKETPLACE CONFIGURATION
# ====================================================================
#
# This is a blockchain-first decentralized marketplace where:
# - ProductRegistry smart contract = source of truth for products
# - IPFS/Bulletin Chain = decentralized metadata storage
# - AssetHub = Hollar payment transactions
# - SQLite = optional 5-minute cache for performance
#
# QUICK START:
# 1. Copy this file to .env: cp .env.example .env
# 2. Configure IPFS (Pinata) credentials for metadata storage
# 3. Deploy ProductRegistry contract and set PRODUCT_REGISTRY_CONTRACT_ADDRESS
# 4. Set EVM_RPC_URL to your blockchain endpoint
# 5. Run: npm run dev
#
# See WEB3_ARCHITECTURE.md for detailed architecture documentation
#
# ====================================================================

# ====================================================================
# SERVER & DATABASE
# ====================================================================

# Database (SQLite cache layer)
# Note: In Web3 architecture, this is a cache, not source of truth
DATABASE_PATH=./data/merchant.db

# Server Configuration
PORT=3000
NODE_ENV=development

# Security
STRICT_IP_VALIDATION=false
CORS_ORIGIN=http://localhost:3000,http://localhost:3001

# Logging
# Options: error, warn, info, debug
LOG_LEVEL=info

# ====================================================================
# DECENTRALIZED STORAGE CONFIGURATION
# ====================================================================

# Storage Provider Selection
# Options: 'ipfs', 'bulletin', 'auto'
# - 'ipfs': Use IPFS/Pinata (production-ready, default)
# - 'bulletin': Use Polkadot Bulletin Chain (Q4 2025 launch, 2-week TTL)
# - 'auto': Auto-select based on availability (defaults to IPFS)
STORAGE_PROVIDER=auto

# IPFS Configuration (via Pinata)
# Get free API keys at: https://app.pinata.cloud/developers/api-keys
# Stores: Product metadata, images, store profiles
PINATA_API_KEY=your_pinata_api_key_here
PINATA_SECRET_API_KEY=your_pinata_secret_key_here

# IPFS Gateway URL (for retrieving content)
# Options:
# - Pinata (recommended): https://gateway.pinata.cloud/ipfs
# - Public gateway: https://ipfs.io/ipfs
# - Cloudflare: https://cloudflare-ipfs.com/ipfs
IPFS_GATEWAY_URL=https://gateway.pinata.cloud/ipfs

# Bulletin Chain Configuration (Q4 2025)
# Enable when Bulletin Chain is live
# Note: 2-week ephemeral storage, ideal for temporary product listings
BULLETIN_CHAIN_ENABLED=false
BULLETIN_CHAIN_WS_ENDPOINT=wss://bulletin-rpc.polkadot.io

# ====================================================================
# BLOCKCHAIN CONFIGURATION (Web3 Architecture)
# ====================================================================

# Blockchain Sync Service
# Enable automatic background sync of on-chain data to local cache
ENABLE_BLOCKCHAIN_SYNC=true

# Sync interval in minutes (how often to refresh products from blockchain)
# Default: 5 minutes (balance between freshness and RPC usage)
# Recommended: 5-15 for production, 1-2 for development
BLOCKCHAIN_SYNC_INTERVAL_MINUTES=5

# Product Registry Smart Contract
# Deploy the ProductRegistry contract and paste the address here
# Deploy command: npm run contract:deploy
# Example: 0x1234567890123456789012345678901234567890
PRODUCT_REGISTRY_CONTRACT_ADDRESS=

# Deployer Private Key (for contract deployment ONLY)
# Generate: Use MetaMask > Account Details > Export Private Key
# IMPORTANT: Keep this secret! Never commit to git!
# Only needed for deployment, not for running the app
DEPLOYER_PRIVATE_KEY=

# EVM RPC Endpoint (for smart contract queries)
# Choose based on your target network:
#
# KUSAMA NETWORKS (EVM Compatible):
# - Moonriver (Production): https://rpc.api.moonriver.moonbeam.network
#
# POLKADOT NETWORKS (EVM Compatible):
# - Moonbeam (Production): https://rpc.api.moonbeam.network
# - Paseo Testnet (Community Testnet): https://rpc.paseo.io
#
# DEVELOPMENT NETWORKS:
# - Moonbase Alpha (Free Testnet): https://rpc.api.moonbase.moonbeam.network
#
# For Kusama deployment (recommended):
EVM_RPC_URL=https://rpc.api.moonriver.moonbeam.network
#
# For Polkadot testnet:
# EVM_RPC_URL=https://rpc.paseo.io
#
# For development/testing:
# EVM_RPC_URL=https://rpc.api.moonbase.moonbeam.network

# Additional RPC endpoints (optional, for multi-network support)
MOONRIVER_RPC_URL=https://rpc.api.moonriver.moonbeam.network
MOONBEAM_RPC_URL=https://rpc.api.moonbeam.network
PASEO_RPC_URL=https://rpc.paseo.io
MOONBASE_RPC_URL=https://rpc.api.moonbase.moonbeam.network

# Asset Hub Configuration (for Hollar payments)
# Main network WSS endpoint
ASSETHUB_WSS_URL=wss://polkadot-asset-hub-rpc.polkadot.io

# Hollar Token Asset ID on Asset Hub
# Default: 1984 (update if different)
HOLLAR_ASSET_ID=1984

# Polkadot Relay Chain (for balance checks, identity lookups)
POLKADOT_WSS_URL=wss://rpc.polkadot.io
KUSAMA_WSS_URL=wss://kusama-rpc.polkadot.io

# ====================================================================
# WALLET & AUTHENTICATION
# ====================================================================

# Session Configuration
# Generate a random secret: openssl rand -base64 32
SESSION_SECRET=your_session_secret_here

# Session max age in milliseconds
# Default: 86400000 (24 hours)
SESSION_MAX_AGE=86400000

# WalletConnect Project ID (for wallet authentication)
# Get free project ID at: https://cloud.walletconnect.com/
# Required for: MetaMask, Talisman, Nova wallet connections
WALLETCONNECT_PROJECT_ID=

# Supported Wallets
# Comma-separated list: metamask,talisman,nova,polkadot-js
SUPPORTED_WALLETS=metamask,talisman,nova,polkadot-js

# ====================================================================
# RATE LIMITING & SECURITY
# ====================================================================

# Rate limit window in milliseconds (15 minutes default)
RATE_LIMIT_WINDOW_MS=900000

# Max requests per window
RATE_LIMIT_MAX_REQUESTS=100

# Admin API Rate Limit (stricter for sync endpoints)
ADMIN_RATE_LIMIT_MAX_REQUESTS=10

# ====================================================================
# DEPLOYMENT & TESTING
# ====================================================================

# Contract Deployment Network
# Choose based on your deployment strategy:
# - moonriver: Kusama production parachain (EVM compatible)
# - moonbeam: Polkadot production parachain (EVM compatible)
# - paseo: Polkadot community testnet (EVM compatible)
# - moonbase: Moonbase Alpha testnet (free, for development)
#
# Recommended for Kusama deployment:
DEPLOYMENT_NETWORK=moonriver
#
# Or use Polkadot testnet:
# DEPLOYMENT_NETWORK=paseo

# Test Wallet Addresses (for development)
# Add test wallet addresses for local testing
TEST_SELLER_WALLET=
TEST_BUYER_WALLET=

# Enable test mode (uses test data, skips some validations)
TEST_MODE=false

# ====================================================================
# MONITORING & DEBUGGING
# ====================================================================

# Enable verbose blockchain logging
BLOCKCHAIN_DEBUG=false

# Enable IPFS upload debugging
IPFS_DEBUG=false

# Health check interval (milliseconds)
HEALTH_CHECK_INTERVAL=60000

# ====================================================================
# OPTIONAL: ADVANCED CONFIGURATION
# ====================================================================

# Cache TTL in seconds (how long to trust cached blockchain data)
# Default: 300 (5 minutes)
CACHE_TTL_SECONDS=300

# Max retry attempts for blockchain queries
BLOCKCHAIN_MAX_RETRIES=3

# Timeout for blockchain RPC calls (milliseconds)
BLOCKCHAIN_RPC_TIMEOUT=30000

# Max concurrent blockchain sync operations
MAX_CONCURRENT_SYNCS=5
